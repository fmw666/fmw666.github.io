{"meta":{"title":"范茂伟的个人博客","subtitle":"Stay hungry,Stay foolish","description":"一个大学学生，将自己平时学的一些东西放在上面，希望结交更多的朋友","author":"范茂伟","url":"http://fmw666.github.io"},"pages":[{"title":"[404]","date":"2018-11-03T05:14:47.854Z","updated":"2018-11-03T05:14:47.854Z","comments":true,"path":"404.html","permalink":"http://fmw666.github.io/404.html","excerpt":"","text":""},{"title":"嗨，欢迎您","date":"2018-11-04T07:51:37.821Z","updated":"2018-11-04T07:51:37.821Z","comments":true,"path":"about/index.html","permalink":"http://fmw666.github.io/about/index.html","excerpt":"","text":"茫茫人海能遇见你，是一种缘分。 如果你喜欢我的一些分享，请与我交个朋友吧！"}],"posts":[{"title":"《C语言》游戏开发基础","slug":"C语言游戏开发基础","date":"2018-11-28T06:02:20.000Z","updated":"2018-11-28T07:29:42.935Z","comments":true,"path":"2018-11-28/C语言游戏开发基础/","link":"","permalink":"http://fmw666.github.io/2018-11-28/C语言游戏开发基础/","excerpt":"","text":"🚀 《C语言》游戏开发基础 游戏框架搭建12345678910111213// 函数外全局变量定义int main()&#123; startup(); // 数据初始化 while (1) // 游戏循环执行 &#123; show(); // 显示画面 updateWithoutInput(); // 与用户输入无关的更新 updateWithInput(); // 与用户输入有关的更新 &#125; return 0;&#125; 目录功能性 清屏函数 延时函数 停止等待函数 系统自带发出铃声 读取键盘上输入的值(需要回车) 读取键盘上输入的值(不需要回车) 判断是否有键盘输入的函数 产生随机数的函数 光标移动到原点位置进行重画(实现类似于清屏函数的效果) 隐藏光标显示函数 添加背景音乐 窗口 修改窗口大小(静态) 修改窗口大小(动态) 固定窗口大小 修改窗体风格 设置指定窗口的显示状态 修改窗口标题 弹出消息框 修改字体颜色、背景颜色 修改文本颜色 修改窗体icon图标 清屏函数 12#include &lt;stdlib.h&gt;system(\"cls\"); 延时函数 12#include &lt;windows.h&gt;Sleep(20); //其中20的单位为毫秒 停止等待函数 12#include &lt;windows.h&gt;system(\"pause\"); 系统自带发出铃声 1printf(\"\\a\"); 读取键盘上输入的值(需要回车) 1234char input;scanf(\"%c\",&amp;input);if(input=='w') printf(\"w\"); 读取键盘上输入的值(不需要回车) 1234567#include&lt;conio.h&gt;char input;//scanf(\"%c\",&amp;input);input = getch();if(input=='w') printf(\"w\"); 判断是否有键盘输入的函数 12#include &lt;conio.h&gt;kbhit(); //若有则返回一个非0值，否则返回0 示例： 123456789101112#include &lt;stdio.h&gt;#include &lt;conio.h&gt;int main()&#123; char input; if(kbhit())&#123; scanf(\"%c\",&amp;input); //需要按下回车键来读取 //input=getch(); printf(\"按下了键\\n\"); &#125;&#125; 123456789101112#include &lt;stdio.h&gt;#include &lt;conio.h&gt;int main()&#123; char input; if(kbhit())&#123; //scanf(\"%c\",&amp;input); input=getch(); //不需要按下回车键来读取 printf(\"按下了键\\n\"); &#125;&#125; 产生随机数的函数 12#include&lt;stdlib.h&gt;rand(); 光标移动到原点位置进行重画(实现类似于清屏函数的效果) 123456789101112131415#include &lt;windows.h&gt;void gotoxy(int x,int y)//类似于清屏函数，光标移动到原点位置进行重画&#123; HANDLE handle = GetStdHandle(STD_OUTPUT_HANDLE); COORD pos; pos.X = x; pos.Y = y; SetConsoleCursorPosition(handle,pos);&#125;int main()&#123; gotoxy(0,0);&#125; 隐藏光标显示函数 123456789101112#include &lt;windows.h&gt;void HideCursor()&#123; CONSOLE_CURSOR_INFO cursor_info=&#123;1,0&#125;; //第二个值为0表示隐藏光标 SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE),&amp;cursor_info);&#125;int main()&#123; HideCursor();&#125; 返回目录 修改窗口大小(静态) 12#include &lt;windows.h&gt;system(\"mode con cols=30 lines=20\"); //其中30为宽的值，20为高的值 修改窗口大小(动态) 12345678910111213141516#include&lt;stdio.h&gt;#include&lt;windows.h&gt;void setWinSize(int height,int width)&#123; char str[20]; sprintf(str, \"mode con: cols=%d lines=%d\", height, width); system(str);&#125;int main()&#123; int height, width; scanf(\"%d %d\", &amp;height, &amp;width); //输入高和宽的值 setWinSize(height,width);&#125; 固定窗口大小 123456789101112#include &lt;windows.h&gt;void fixWinSize() &#123; HWND hWnd = GetConsoleWindow(); //获得cmd窗口句柄 RECT rc; GetWindowRect(hWnd, &amp;rc); //获得cmd窗口对应矩形 //改变cmd窗口风格 SetWindowLongPtr(hWnd,GWL_STYLE, GetWindowLong(hWnd, GWL_STYLE) &amp; ~WS_THICKFRAME &amp; ~WS_MAXIMIZEBOX &amp; ~WS_MINIMIZEBOX);&#125;fixWinSize(); 修改窗体风格 12345678910#include &lt;windows.h&gt;void setWinLong()&#123; HWND hwnd = GetConsoleWindow(); LONG Style; //窗口风格 Style = GetWindowLong(hwnd, GWL_STYLE); // 得到窗口风格 Style = Style &amp; ~WS_CAPTION; //去掉标题栏，网上可查选 SetWindowLong(hwnd, GWL_STYLE, Style); //为窗口设置新的风格&#125; 设置指定窗口的显示状态 1234#include &lt;windows.h&gt;ShowWindow(FindWindowA(\"ConsoleWindowClass\",NULL),SW_HIDE); //隐藏窗口ShowWindow(FindWindowA(\"ConsoleWindowClass\",NULL),SW_SHOW); //显示窗口 修改窗口标题 方法一： 12#include &lt;windows.h&gt;SetConsoleTitleA(\"name\"); 方法二： 12#include &lt;windows.h&gt;system(\"title name\"); 弹出消息框 123#include &lt;windows.h&gt;MessageBoxA(0,\"内容\",\"标题\",MB_OK|MB_SYSTEMMODAL); //MB_OK表示有确认键，MB_SYSTEMMODAL表示在窗口置顶 修改字体颜色、背景颜色 方法一： 12345678910111213141516#include &lt;windows.h&gt;system(\"color 07\"); //(07)为默认的黑底白字。其中0为背景色，7为前景色/*颜色属性由两个十六进制数字指定 -- 第一个为背景色，第二个则为前景色。每个数字可以为以下任何值之一:0 = 黑色 8 = 灰色1 = 蓝色 9 = 淡蓝色2 = 绿色 A = 淡绿色3 = 湖蓝色 B = 淡浅绿色4 = 红色 C = 淡红色5 = 紫色 D = 淡紫色6 = 黄色 E = 淡黄色7 = 白色 F = 亮白色*/ 方法二： 123456789#include &lt;windows.h&gt;void SetColor(unsigned short BackGroundColor,unsigned short ForeColor)&#123; HANDLE hCon=GetStdHandle(STD_OUTPUT_HANDLE); SetConsoleTextAttribute(hCon,(ForeColor%16)|(BackGroundColor%16*16));&#125;SetColor(0,7); //(0,7)为默认的黑底白字。其中0为背景色，7为前景色 示例： 123456789101112131415161718192021#include &lt;windows.h&gt;#include &lt;stdio.h&gt;void SetColor(unsigned short BackGroundColor,unsigned short ForeColor)&#123; HANDLE hCon=GetStdHandle(STD_OUTPUT_HANDLE); SetConsoleTextAttribute(hCon,(ForeColor%16)|(BackGroundColor%16*16));&#125;int main()&#123; system(\"color 70\"); printf(\"方法一\\n\"); int i,j; while(scanf(\"%d %d\",&amp;i,&amp;j)) &#123; SetColor(i,j); printf(\"方法二\\n\"); &#125;&#125; 修改文本颜色 12#include &lt;windows.h&gt;SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), 2); //设置颜色 添加背景音乐 1// 只在VC上支持 修改字体大小 1//暂未 修改窗体icon图标 1Dev-C++ 新建项目-&gt;`Ctrl+H`(项目属性) 键盘输入上下左右，回车确定，Esc退出 12345678910111213141516171819char input;while(1)&#123; input=getch(); if(input==27)&#123; //Esc键ASCII码为27 &#125; if(input==13)&#123; //回车键ASCII码为13 &#125; if(input!=-32) continue; //避免因从键盘上输入的其他无关值影响程序进行 input=getch(); //在读取上下左右ASCII码前必须添加 if(input==72)&#123; //上的ASCII码为72 &#125; if(input==80)&#123; //下的ASCII码为80 &#125; if(input==75)&#123; //左的ASCII码为75 &#125; if(input==77)&#123; //右的ASCII码为77 &#125;&#125; 返回目录","categories":[{"name":"IT","slug":"IT","permalink":"http://fmw666.github.io/categories/IT/"}],"tags":[{"name":"C语言","slug":"C语言","permalink":"http://fmw666.github.io/tags/C语言/"},{"name":"游戏","slug":"游戏","permalink":"http://fmw666.github.io/tags/游戏/"}]},{"title":"git教程","slug":"git教程","date":"2018-11-02T11:18:43.000Z","updated":"2018-11-03T05:54:31.069Z","comments":true,"path":"2018-11-02/git教程/","link":"","permalink":"http://fmw666.github.io/2018-11-02/git教程/","excerpt":"","text":"⚡Git是目前世界上最先进的分布式版本控制系统（没有之一）。 在Windows上安装Git Git官网直接下载安装程序，（网速慢的同学请移步国内镜像） 安装完成后，在开始菜单里找到&quot;Git&quot;-&gt;&quot;Git Bash&quot;,进行如下配置： 12$ git config --global user.name &quot;Your Name&quot; $ git config --global user.email &quot;email@example.com&quot; 生成相应的令牌，本地一份，Github 一份，这样 Github 可以在你使用仓库的时候，进行校验确定你的身份。 123$ cd ~/.ssh$ mkdir key_backup$ ssh-keygen -t rsa -C &quot;email@example.com&quot; 生成如下两个文件： id_rsa.pub 就是我们待会需要的公钥文件，使用命令 $ cat id_rsa.pub 再将内容复制到剪切板，然后进入github账号设置里面添加SSH key 然后输入 $ ssh -T git@github.com 测试连通状态 创建本地仓库 选择一个本地文件夹，用作保存本地仓库文件，尽量是空文件夹。 然后使用命令 $ git init 初始化文件夹。 其实是在当前文件夹下生成一个叫 .git 的隐藏文件夹，里面是一些配置文件，不要随意更改。 使用 $ git clone https://github.com/name/repository.git 将远程仓库克隆到本地此文件夹下。 name 是自己的昵称，repository 是自己的仓库名，不要忘记末尾的 .git 后缀。 然后此文件夹下会多一个和你仓储名一样的文件夹，内部文件与远程仓库一样。 常用命令 1234567$ git add . //添加文件$ git commit -m &quot;commit-messages&quot; //提交本地仓库$ git push origin master //提交远程仓库$ git pull //拉取远程文件，与以下命令类似$ git branch temp //创建本地分支$ git fetch origin master:temp$ git merge master 图床介绍 写博客就无法避免上传图片，图床就是这么一个地方，就是一个网站，你发自己的图片上传到它的网站，然后它给你一个这个图片的链接，插入博客中就能显示图片了。 推荐一个知名的，七牛云https://portal.qiniu.com/，注册完实名认证后有一些优惠。 还有一个神奇的网站：https://sm.ms/，也能用 Hexo+github博客搭建 推荐一个CSDN博主的文章，点击这里 一个git用户很详细的分享，点击这里 当然，官方教程更全面，点击这里 这里分享一篇我的总结，点击这里","categories":[{"name":"IT","slug":"IT","permalink":"http://fmw666.github.io/categories/IT/"}],"tags":[{"name":"git","slug":"git","permalink":"http://fmw666.github.io/tags/git/"},{"name":"后台","slug":"后台","permalink":"http://fmw666.github.io/tags/后台/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-10-31T16:00:00.000Z","updated":"2018-11-02T13:03:04.768Z","comments":true,"path":"2018-11-01/hello-world/","link":"","permalink":"http://fmw666.github.io/2018-11-01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}